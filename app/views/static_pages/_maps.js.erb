var handler = Gmaps.build('Google');
handler.buildMap({
  provider: {
    disableDefaultUI: false,
    zoom: 15
  }, internal: {
    id: 'map'
  }
}, function(){
  setGeolocation();
  searchAddress();
});

// INITIALIZE GLOBAL VARIABLES
var square = 1000; // Circle square for calculations
var circle = handler.addCircle({ lat: -30.03518581, lng: -51.22660625, radius: square },{ strokeColor: '#FF0000'}); // Circle with default values
var oldMarker = {latitude: -30.03518581, longitude: -51.22660625}; // The last marker used with default values

// FUNCTION TO CLEAN THE DATA
function resetMap(){
  handler.clusterer.serviceObject.clearMarkers();
  circle.setMap(null);
  handler.resetBounds();
};

// FUNCTION TO ENABLE GEOLOCATION
function setGeolocation(){
  if(navigator.geolocation)
    navigator.geolocation.getCurrentPosition(displayOnMap, allData);
};

// FUNCTION TO SHOW ALL DATA
function allData(){
  resetMap();
  
  var pets = <%=raw @hash.to_json %>;
  var markers = handler.addMarkers(pets); 
  
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
};

// FUNCTION TO SET THE CIRCLE
function displayOnMap(position){
  resetMap();
  
  var marker = handler.addMarker({
    lat: position.coords.latitude,
    lng: position.coords.longitude    
  });
  
  oldMarker = position;
  
  handler.map.centerOn(marker);
  setCircle(position, square);
};

// FUNCTION TO SET THE CIRCLE
function setCircle(position, square){
  circle = handler.addCircle(
    { lat: position.coords.latitude, lng: position.coords.longitude, radius: square },
    { strokeColor: '#FF0000'}
  );
  handler.bounds.extendWith(circle);
  
  setMarkers(position, square);
}

// FUNCTION TO ADD DATA IN THE CIRCLE
function setMarkers(position, square){
  var addressLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
  var pets = <%=raw @hash.to_json %>;
  var arrayPets = [];

  $.each(pets, function(index, pet) {
    var addressPet = new google.maps.LatLng(pet.lat,pet.lng);
    var distance = google.maps.geometry.spherical.computeDistanceBetween(addressLocation, addressPet);
    
    if (distance <= square)
      arrayPets.push(pet);
  });
  
  var markers = handler.addMarkers(arrayPets); 
  handler.bounds.extendWith(markers);
  handler.fitMapToBounds();
};

// FUNCTION TO ADJUST THE CIRCLE
function adjustSquare(newSquare){
  square = (newSquare*1000);
  displayOnMap(oldMarker);
};

// FUNCTION TO SEARCH THE ADDRESS AND SET THE NEW ONE
function searchAddress(){
  var position;
  var coords;
  
  // Setting up the search box
  var map = handler.getMap();
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });
  
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();
    var bounds = new google.maps.LatLngBounds();
  
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
  
      if(place.geometry.viewport)
        bounds.union(place.geometry.viewport);
      else
        bounds.extend(place.geometry.location);
      
      // Define the position searched
      position = {
        coords: {
          latitude: parseFloat(place.geometry.location.lat()),
          longitude: parseFloat(place.geometry.location.lng())
        }
      };
      
      oldMarker = position;
      
      displayOnMap(position);
      map.fitBounds(bounds);
    });
  });
};


// FUNCTION TO THE BUTTON TO REDIRECT TO PET PAGE
function redirectPet(id){
  var url = "<%= pets_path %>/"+id;
  window.location.href = url;
};

